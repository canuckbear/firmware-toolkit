# see "man logrotate" for details
# rotate log files {{ dft_logrotate.frequency  }}
{% if dft_logrotate.frequency is defined %}
{{ dft_logrotate.frequency  }}
{% else %}
weekly
{% endif %}

# number of backlogs to keep track of
{% if dft_logrotate.rotate_count is defined %}
rotate {{ dft_logrotate.rotate_count }}
{% else %}
rotate 4
{% endif %}
{% if dft_logrotate.create is defined %}

# Immediately after rotation (before the postrotate script is run) the log file is created
# (with the same name  as  the  log  file just rotated).  mode specifies the mode for the log
# file in octal (the same as chmod(2)), owner specifies the user name who will own the log file,
# and group specifies the  group  the log  file will belong to. Any of the log file attributes
# may be omitted, in which case those attributes for the new file will use the same values as
# the original log file for  the  omitted  attributes. This option can be disabled using the
# nocreate option.
create {{ dft_logrotate.create }}
{% endif %}
{% if dft_logrotate.create_old_dir is defined %}

  # If  the  directory specified by olddir directive does not exist, it is created. mode specifies
  # the mode for the olddir directory in octal (the same as chmod(2)), owner specifies the user
  # name who will own the  olddir  directory,  and group specifies the group the olddir directory
  # will belong to. This option can be disabled using the nocreateolddir option.
createolddir {{ dft_logrotate.create_old_dir }}
{% endif %}

# Are the log files compressed ?
{% if dft_logrotate.compress is defined and dft_logrotate.compress %}
compress
{% else %}
nocompress
{% endif %}

# Command used for log compression
{% if dft_logrotate.compress_command is defined %}
compresscmd {{ dft_logrotate.compress_command }}
{% else %}
compresscmd /bin/gzip
{% endif %}
{% if dft_logrotate.compress_extension is defined %}

# Extension of the compressed log files
compressext {{ dft_logrotate.compress_extension }}
{% endif %}
{% if dft_logrotate.uncompress_command is defined %}

# Command used for log uncompression
uncompresscmd {{ dft_logrotate.uncompress_command }}
{% endif %}
{% if dft_logrotate.compress_options is defined %}

# Options passed to the compress command. The default, for gzip(1),  is  "-6"
# (biased  towards high compression at the expense of speed).  If you use a
# different compression command, you may need to change the compressoptions to match.
compressoptions {{ dft_logrotate.compress_options }}
{% endif %}
{% if dft_logrotate.copy is defined and dft_logrotate.copy %}

# Make a copy of the log file, but don't change the original at all.
# This option can be used, for instance, to make  a snapshot  of  the
# current log file, or when some other utility needs to truncate or parse
# the file.  When this option is used, the create option will have no
# effect, as the old log file stays in place.C ommand used for log
# uncompression
copy
{% endif %}
{% if dft_logrotate.copy_truncate is defined and dft_logrotate.copy_truncate %}

# Truncate the original log file to zero size in place after creating a copy,
# instead of moving the old  log  file  and optionally  creating  a new one.
# It can be used when some program cannot be told to close its logfile and thus might
# continue writing (appending) to the previous log file forever.  Note that there is
# a very small  time  slice  between copying  the file and truncating it, so some
# logging data might be lost.  When this option is used, the create option
# will have no effect, as the old log file stays in place.
copytruncate
{% endif %}
{% if dft_logrotate.date_extension is defined and dft_logrotate.date_extension %}

# Archive old versions of log files adding a date extension like YYYYMMDD instead of
# simply adding a number. The extension may be configured using the dateformat and
# dateyesterday options.
dateext
{% endif %}
{% if dft_logrotate.date_format is defined %}

# Specify  the  extension for dateext using the notation similar to strftime(3) function.
# Only %Y %m %d %H %M %S %V and %s specifiers are allowed.  The default value is -%Y%m%d
# except hourly, which uses -%Y%m%d%H as default value. Note that also the character
# separating log name from the extension is part of the dateformat string. The system clock
# must be set past Sep 9th 2001 for %s to work correctly.  Note that the datestamps generated
# by this format must be lexically sortable (i.e., first the year, then the month then the day.
# e.g., 2001/12/01 is ok, but 01/12/2001 is not, since 01/11/2002 would sort lower while it
# is later).  This is because when using the rotate option, logrotate sorts all rotated
# filenames to find out which logfiles are older and should be removed.
dateformat: format_string
{% endif %}
{% if dft_logrotate.date_yesterday is defined and dft_logrotate.date_yesterday %}

# Use  yesterday's  instead of today's date to create the dateext extension, so that the rotated
# log file has a date in its name that is the same as the timestamps within it.
dateyesterday
{% endif %}
{% if dft_logrotate.delay_compress is defined and dft_logrotate.delay_compress %}

# Postpone compression of the previous log file to the next rotation cycle.  This only has effect
# when used in combination with compress. It can be used when some program cannot be told to
# close its logfile and thus might continue writing to the previous log file for some time.
delaycompress
{% endif %}
{% if dft_logrotate.extension is defined %}

# Log files with ext extension can keep it after the rotation. If compression is used, the
# compression extension (normally .gz) appears after ext. For example you have a logfile named
# mylog.foo and want to rotate it to mylog.1.foo.gz instead of mylog.foo.1.gz.
extension {{ dft_logrotate.extension }}
{% endif %}
{% if dft_logrotate.add_extension is defined %}

# Log files are given the final extension ext after rotation. If the original file already ends
# with ext, the extension is not duplicated, but merely moved to the end, i.e. both filename
# and filenameext would get rotated to filename.1ext. If compression is used, the compression
# extension (normally .gz) appears after ext.
addextension {{ dft_logrotate.add_extension }}
{% endif %}
{% if dft_logrotate.if_empty is defined and dft_logrotate.if_empty %}

# Rotate the log file even if it is empty, overriding the notifempty option (ifempty is the
# default).
ifempty
{% endif %}
{% if dft_logrotate.min_age is defined %}

# Do not rotate logs which are less than <count> days old.
minage {{ dft_logrotate.min_age }}
{% endif %}
{% if dft_logrotate.max_age is defined %}

# Remove rotated logs older than <count> days. The age is only checked if the logfile is to be
# rotated. The files are mailed to the configured address if maillast and mail are configured.
maxage {{ dft_logrotate.max_age }}
{% endif %}
{% if dft_logrotate.max_size is defined %}

# Log files are rotated when they grow bigger than size bytes even before the additionally
# specified time interval (daily, weekly, monthly, or yearly). The related size option is similar
# except that it is mutually exclusive with the time interval options, and it causes log files
# to be rotated without regard for the last rotation time. When maxsize is used, both the size
# and timestamp of a log file are considered.
maxsize {{ dft_logrotate.max_size }}
{% endif %}
{% if dft_logrotate.min_size is defined %}

# Log files are rotated when they grow bigger than size bytes, but not before the additionally
# specified time interval (daily, weekly, monthly, or yearly). The related size option is similar
# except that it is mutually exclusive with the time interval options, and it causes log files
# to be rotated without regard for the last rotation time. When minsize is used, both the size
# and timestamp of a log file are considered.
minsize {{ dft_logrotate.min_size }}
{% endif %}

{% if dft_logrotate.missing_ok is defined and dft_logrotate.missing_ok %}
# If the log file is missing, go on to the next one without issuing an error message. See also
# nomissingok. Default is nomissingok. If nomissingok is activated, and if a log file does not
# exist, issue an error. There is only one variable to control both. If missingok is set to
# false, then nomissingok is output to configuration file.
missingok
{% else %}
nomissingok
{% endif %}
{% if dft_logrotate.no_copy is defined and dft_logrotate.no_copy %}

# Do not copy the original log file and leave it in place.  (this overrides the copy option).
nocopy
{% endif %}
{% if dft_logrotate.no_copy_truncate is defined and dft_logrotate.no_copy_truncate %}

# Do not truncate the original log file in place after creating a copy (this overrides the
# copytruncate option).
nocopytruncate
{% endif %}
{% if dft_logrotate.no_create_old_dir is defined and dft_logrotate.no_create_old_dir %}

# olddir directory is not created by logrotate when it does not exist.
nocreateolddir
{% endif %}
{% if dft_logrotate.no_delay_compress is defined and dft_logrotate.no_delay_compress %}

# Do  not  postpone  compression  of the previous log file to the next rotation cycle (this
# overrides the delaycompress
# option).
nodelaycompress
{% endif %}
{% if dft_logrotate.not_if_empty is defined and dft_logrotate.not_if_empty %}

# Do not rotate the log if it is empty (this overrides the ifempty option).
notifempty
{% endif %}
{% if dft_logrotate.old_dir is defined %}

# Logs are moved into directory for rotation. The directory must be on the same physical device
# as the log file being rotated, unless copy, copytruncate or renamecopy option is used. The
# directory is assumed to be relative to the directory holding the log file unless an absolute
# path name is specified. When this option is used all old versions of the log end up in
# directory. This option may be overridden by the noolddir option.
olddir {{ dft_logrotate.old_dir }}
{% endif %}
{% if dft_logrotate.rename_copy is defined and dft_logrotate.rename_copy %}

# Log file is renamed to temporary filename in the same directory by adding ".tmp" extension to
# it. After that, postrotate script is run and log file is copied from temporary filename to
# final filename. This allows storing rotated log files on the different devices using olddir
# directive. In the end, temporary filename is removed.
renamecopy
{% endif %}
{% if dft_logrotate.size is defined %}

# Log  files  are rotated only if they grow bigger than size bytes. If size is followed by k,
# the size is assumed to be in kilobytes. If the M is used, the size is in megabytes, and if
# G is used, the size is in gigabytes. So  size  100, size 100k, size 100M and size 100G are
# all valid.
size {{ dft_logrotate.size }}
{% endif %}
{% if dft_logrotate.shred is defined and dft_logrotate.shred %}

# Delete  log  files  using  shred  -u  instead of unlink().  This should ensure that logs are
# not readable after their scheduled deletion; this is off by default. See also noshred.
shred
{% endif %}
{% if dft_logrotate.su is defined %}

# Rotate log files set under this user and group instead of using default user/group (usually
# root). user specifies the user name used for rotation and group specifies the group used for
# rotation. If the user/group you specify here does not have sufficient privilege to make files
# with the ownership you've specified in a create instruction, it will cause an error.
su {{ dft_logrotate.su }}
{% endif %}
{% if dft_logrotate.no_create is defined and dft_logrotate.no_create %}

# Rotate the log file even if it is empty, overriding the notifempty option (ifempty is the
# default).
nocreate
{% endif %}

# packages drop log rotation information into this directory
include /etc/logrotate.d

# no packages own wtmp, or btmp -- we'll rotate them here
/var/log/wtmp {
    missingok
    weekly
    create 0664 root utmp
    rotate 1
}

/var/log/btmp {
    missingok
    weekly
    create 0660 root utmp
    rotate 1
}

# system-specific logs may be configured here
